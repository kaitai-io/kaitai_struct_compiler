package io.kaitai.struct.translators

import java.nio.charset.Charset

import io.kaitai.struct.CppRuntimeConfig.{RawPointers, UniqueAndRawPointers}
import io.kaitai.struct.datatype.DataType
import io.kaitai.struct.datatype.DataType._
import io.kaitai.struct.exprlang.Ast
import io.kaitai.struct.exprlang.Ast.expr
import io.kaitai.struct.format.{EnumSpec, Identifier}
import io.kaitai.struct.languages.CppCompiler
import io.kaitai.struct.languages.components.CppImportList
import io.kaitai.struct.{RuntimeConfig, Utils}

class CppTranslator(provider: TypeProvider, importListSrc: CppImportList, importListHdr: CppImportList, config: RuntimeConfig)
  extends BaseTranslator(provider)
    with MinSignedIntegers {
  val CHARSET_UTF8 = Charset.forName("UTF-8")

  /**
    * Handles integer literals for C++ by appending relevant suffix to decimal notation.
    *
    * Note that suffixes essentially mean "long", "unsigned long", and "unsigned long long", which
    * are not really guaranteed to match `int32_t`, `uint32_t` and `uint64_t`, but it would work for
    * the majority of current compilers.
    *
    * For reference, ranges of integers that are used in this conversion are:
    *
    *   - int32_t (no suffix): -2147483648..2147483647
    *   - uint32_t (UL): 0..4294967295
    *   - int64_t (LL): -9223372036854775808..9223372036854775807
    *   - uint64_t (ULL): 0..18446744073709551615
    *
    * Beyond these boundaries, C++ is unlikely to be able to represent these anyway, so we just drop
    * the suffix and hope for the miracle.
    *
    * The minimum signed 32-bit and 64-bit integers (Int.MinValue and Long.MinValue) are
    * intentionally omitted, since they're handled by [[MinSignedIntegers]].
    *
    * @param n integer to render
    * @return rendered integer literal in C++ syntax as string
    */
  override def doIntLiteral(n: BigInt): String = {
    val suffixOpt: Option[String] =
      if (n >= Int.MinValue + 1 && n <= Int.MaxValue) {
        Some("") // -2147483647..2147483647
      } else if (n > Int.MaxValue && n <= Utils.MAX_UINT32) {
        Some("UL") // 2147483648..4294967295
      } else if ((n >= Long.MinValue + 1 && n < Int.MinValue) || (n > Utils.MAX_UINT32 && n <= Long.MaxValue)) {
        Some("LL") // -9223372036854775807..-2147483649 | 4294967296..9223372036854775807
      } else if (n > Long.MaxValue && n <= Utils.MAX_UINT64) {
        Some("ULL") // 9223372036854775808..18446744073709551615
      } else {
        None
      }

    suffixOpt match {
      case Some(suffix) => s"$n$suffix"
      case None => super.doIntLiteral(n) // delegate to parent implementations
    }
  }

  def doRawStringLiteral(s: String): String = super.doStringLiteral(s)

  /**
    * Handles string literal for C++ by wrapping a C `const char*`-style string
    * into a std::string constructor. Note that normally std::string
    * constructor treats given string in C manner, i.e. as zero-terminated
    * (and it is indeed would be generated by compiler as zero-terminated const
    * in .rodata segment). However, this is bad for string literals that contain
    * zero inside them: they would be cut abruptly at that zero. So, for string
    * literals that contain zero inside them, we use another constructor, which
    * allows explicit byte size argument.
    *
    * @param s string to present as C++ string literal
    * @return string as C++ string literal
    */
  override def doStringLiteral(s: String): String = {
    val lenSuffix = if (s.contains("\u0000")) {
      ", " + s.getBytes(CHARSET_UTF8).length
    } else {
      ""
    }
    s"std::string(${super.doStringLiteral(s)}$lenSuffix)"
  }

  /**
    * https://en.cppreference.com/w/cpp/language/escape
    */
  override val asciiCharQuoteMap: Map[Char, String] = Map(
    '\t' -> "\\t",
    '\n' -> "\\n",
    '\r' -> "\\r",
    '"' -> "\\\"",
    '\\' -> "\\\\",

    '\u0007' -> "\\a",
    '\f' -> "\\f",
    '\u000b' -> "\\v",
    '\b' -> "\\b"
  )

  override def doArrayLiteral(t: DataType, values: Seq[expr]): String = {
    if (config.cppConfig.useListInitializers) {
      importListHdr.addSystem("vector")
      val cppElType = CppCompiler.kaitaiType2NativeType(config.cppConfig, importListHdr, t)
      val rawInit = s"new std::vector<$cppElType>{" + values.map((value) => translate(value)).mkString(", ") + "}"
      config.cppConfig.pointers match {
        case RawPointers =>
          rawInit
        case UniqueAndRawPointers =>
          s"std::unique_ptr<std::vector<$cppElType>>($rawInit)"
        // TODO: C++14
      }
    } else {
      throw new RuntimeException("literal arrays are not yet implemented for C++98 (pass `--cpp-standard 11` to target C++11)")
    }
  }

  override def doByteArrayLiteral(arr: Seq[Byte]): String =
    "std::string(\"" + Utils.hexEscapeByteArray(arr) + "\", " + arr.length + ")"
  override def doByteArrayNonLiteral(values: Seq[Ast.expr]): String = {
    // It is assumed that every expression produces integer in the range [0; 255]
    if (config.cppConfig.useListInitializers) {
      "std::string({" + values.map(value => s"static_cast<char>(${translate(value)})").mkString(", ") + "})"
    } else {
      // TODO: We need to produce an expression, but this is only possible using
      // initializer lists or variadic templates (if we use a helper function),
      // both of which are only available since C++11
      throw new RuntimeException("non-literal byte arrays are not yet implemented for C++98 (pass `--cpp-standard 11` to target C++11)")
    }
  }

  /**
    * Hex escapes in C++ does not limited in length, so we use octal, as they are shorter.
    *
    * Note that we use strictly 3 octal digits to work around potential
    * problems with following decimal digits, i.e. "\0" + "2" that would be
    * parsed as single character "\02" = "\x02", instead of two characters
    * "\x00\x32".
    *
    * @see https://en.cppreference.com/w/cpp/language/escape
    * @param code character code to represent
    * @return string literal representation of given code
    */
  override def strLiteralGenericCC(code: Char): String =
    "\\%03o".format(code.toInt)

  override def genericBinOp(left: Ast.expr, op: Ast.binaryop, right: Ast.expr, extPrec: Int) = {
    (detectType(left), detectType(right), op) match {
      case (_: IntType, _: IntType, Ast.operator.Mod) =>
        s"${CppCompiler.kstreamName}::mod(${translate(left)}, ${translate(right)})"
      case _ =>
        super.genericBinOp(left, op, right, extPrec)
    }
  }

  override def anyField(value: expr, attrName: String): String =
    s"${translate(value)}->${doName(attrName)}"

  override def doName(s: String) = s match {
    case Identifier.ITERATOR => "_"
    case Identifier.ITERATOR2 => "_buf"
    case Identifier.INDEX => "i"
    case _ => s"$s()"
  }

  override def doInternalName(id: Identifier): String =
    CppCompiler.privateMemberName(id)

  override def doEnumByLabel(enumSpec: EnumSpec, label: String): String = {
    val isExternal = enumSpec.isExternal(provider.nowClass)
    if (isExternal) {
      importListHdr.addLocal(CppCompiler.outFileNameHeader(enumSpec.name.head))
    }
    CppCompiler.types2class(enumSpec.name.dropRight(1)) + "::" +
      Utils.upperUnderscoreCase(enumSpec.name.last + "_" + label)
  }
  override def doEnumById(enumSpec: EnumSpec, id: String): String =
    s"static_cast<${CppCompiler.types2class(enumSpec.name)}>($id)"

  override def doStrCompareOp(left: Ast.expr, op: Ast.cmpop, right: Ast.expr, extPrec: Int) = {
    if (op == Ast.cmpop.Eq || op == Ast.cmpop.NotEq) {
      super.doStrCompareOp(left, op, right, extPrec)
    } else {
      s"(${translate(left, METHOD_PRECEDENCE)}.compare(${translate(right)}) ${cmpOp(op)} 0)"
    }
  }

  override def arraySubscript(container: expr, idx: expr): String =
    s"${translate(container)}->at(${translate(idx)})"
  override def doIfExp(condition: expr, ifTrue: expr, ifFalse: expr): String =
    s"((${translate(condition)}) ? (${translate(ifTrue)}) : (${translate(ifFalse)}))"
  override def doCast(value: Ast.expr, typeName: DataType): String =
    s"static_cast<${CppCompiler.kaitaiType2NativeType(config.cppConfig, importListHdr, typeName)}>(${translate(value)})"

  // Predefined methods of various types
  override def strToInt(s: expr, base: expr): String = {
    val baseStr = translate(base)

    s"${CppCompiler.kstreamName}::string_to_int(${translate(s)}" + (baseStr match {
      case "10" => ""
      case _ => s", $baseStr"
    }) + ")"
  }
  override def enumToInt(v: expr, et: EnumType): String =
    translate(v)
  override def boolToInt(v: expr): String =
    s"((${translate(v)}) ? 1 : 0)"
  override def floatToInt(v: expr): String =
    s"static_cast<int>(${translate(v)})"
  override def intToStr(i: expr): String =
    // FIXME: proper way for C++11, but not available in earlier versions
    //s"std::to_string(${translate(i)})"
    s"${CppCompiler.kstreamName}::to_string(${translate(i)})"
  override def bytesToStr(bytesExpr: String, encoding: String): String =
    s"""${CppCompiler.kstreamName}::bytes_to_str($bytesExpr, ${doRawStringLiteral(encoding)})"""
  override def bytesLength(b: Ast.expr): String =
    s"${translate(b, METHOD_PRECEDENCE)}.length()"

  override def bytesSubscript(container: Ast.expr, idx: Ast.expr): String =
    s"${translate(container, METHOD_PRECEDENCE)}.at(${translate(idx)})"
  override def bytesFirst(b: Ast.expr): String = {
    val bStr = translate(b, METHOD_PRECEDENCE)
    config.cppConfig.stdStringFrontBack match {
      case true => s"$bStr.front()"
      case false => s"$bStr.at(0)"
    }
  }
  override def bytesLast(b: Ast.expr): String = {
    val bStr = translate(b, METHOD_PRECEDENCE)
    config.cppConfig.stdStringFrontBack match {
      case true => s"$bStr.back()"
      case false => s"$bStr.at($bStr.length() - 1)"
    }
  }
  override def bytesMin(b: Ast.expr): String =
    s"${CppCompiler.kstreamName}::byte_array_min(${translate(b)})"
  override def bytesMax(b: Ast.expr): String =
    s"${CppCompiler.kstreamName}::byte_array_max(${translate(b)})"

  override def strLength(s: expr): String =
    s"${translate(s, METHOD_PRECEDENCE)}.length()"
  override def strReverse(s: expr): String =
    s"${CppCompiler.kstreamName}::reverse(${translate(s)})"
  override def strSubstring(s: expr, from: expr, to: expr): String =
    s"${translate(s, METHOD_PRECEDENCE)}.substr(${translate(from)}, ${genericBinOp(to, Ast.operator.Sub, from, 0)})"

  override def arrayFirst(a: expr): String =
    s"${translate(a, METHOD_PRECEDENCE)}->front()"
  override def arrayLast(a: expr): String =
    s"${translate(a, METHOD_PRECEDENCE)}->back()"
  override def arraySize(a: expr): String =
    s"${translate(a, METHOD_PRECEDENCE)}->size()"
  override def arrayMin(a: expr): String = {
    importListSrc.addSystem("algorithm")
    val v = translate(a, METHOD_PRECEDENCE)
    s"*std::min_element($v->begin(), $v->end())"
  }
  override def arrayMax(a: expr): String = {
    importListSrc.addSystem("algorithm")
    val v = translate(a, METHOD_PRECEDENCE)
    s"*std::max_element($v->begin(), $v->end())"
  }
}
